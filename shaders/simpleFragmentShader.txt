#version 330

in vec3 position_eye, normal_eye;

uniform mat4 view;

in vec2 TexCoords;

uniform sampler2D texture_diffuse1;

// fixed point light properties
uniform vec3 light_position_world;
uniform vec3 Ls;
uniform vec3 Ld;
uniform vec3 La;

// surface reflection;
uniform vec3 Ks;
uniform vec3 Kd;
uniform vec3 Ka;
float specular_exponent = 100.0; // specular 'power'

out vec4 frag_colour; // final colour of surface

void main () {
	// ambient intensity
	vec3 Ia = La * Ka;

	// diffuse intensity
	// raise light position to eye space
	vec3 light_position_eye = vec3 (view * vec4 (light_position_world, 1.0));
	vec3 distance_to_light_eye = light_position_eye - position_eye;
	vec3 direction_to_light_eye = normalize (distance_to_light_eye);
	float dot_prod = dot (direction_to_light_eye, normal_eye);
	dot_prod = max (dot_prod, 0.0);
	vec3 Id = Ld * Kd * dot_prod; // final diffuse intensity

	// specular intensity
	vec3 surface_to_viewer_eye = normalize (-position_eye);

	// phong shading
	vec3 half_way_eye = normalize (surface_to_viewer_eye + direction_to_light_eye);
	float dot_prod_specular = max (dot (half_way_eye, normal_eye), 0.0);
	float specular_factor = pow (dot_prod_specular, specular_exponent);

	vec3 Is = Ls * Ks * specular_factor; // final specular intensity

	// final colour
	frag_colour =  texture (texture_diffuse1, TexCoords)*vec4 (Is + Id + Ia, 0.5) ;
}


